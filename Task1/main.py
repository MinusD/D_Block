"""
Каждый класс реализовать в отдельном модуле, импортируя их в производные модули.
Создать класс Person с полями имя, фамилия, возраст. Добавить конструктор класса.
Создать производный от Person класс Doctor. Новые поля: номер удостоверения, специальность, список текущих
    пациентов (словарь вида номер медицинской книжки: ФИ пациента). Определить конструктор, с вызовом родительского
    конструктора. Определить функции добавления нового пациента, удаления выписанного, форматированной печати
    всех пациентов. Переопределить метод преобразования в строку для печати основной информации (ФИ, возраст,
    номер удостоверения, специальность).
Создать производный от Person класс Nurse. Новые поля: номер удостоверения, отделение работы, график работы
    (словарь вида день недели: часы работы). Определить конструктор, с вызовом родительского конструктора.
    Определить функции изменения отделения, добавления, удаления и изменения графика работы. Переопределить
    метод преобразования в строку для печати основной информации (ФИ, возраст, номер удостоверения, отделение).
Создать класс Hospital. Поля: название больницы, адрес, список врачей (список экземпляров класса Doctor),
    список медсестер (список экземпляров класса Nurse). Определить конструктор. Переопределить метод преобразования
    в строку для печати всей информации о больнице (с использованием переопределения в классах Doctor и Nurse).
    Переопределить методы получения количества врачей функцией len, получения врача по индексу, изменения
    по индексу, удаления по индексу (пусть номера врачей считаются с 1, а индекс 0 – список всех медсестер).
    Переопределить операции + и - для добавления или удаления врача. Добавить функцию создания txt-файла и
    записи всей информации в него (в том числе пациентов врачей и графика работы медсестер).
Предусмотреть хотя бы в 3 местах обработку возможных исключений.
В каждом модуле провести подробное тестирование всех создаваемых объектов и функций.
"""
import pickle
from Task1.Hospital import *


if __name__ == '__main__':
    try:
        nurse = Nurse("Анна", "Анимова", 20, 234, "Центральный департамент",
                      {'Monday': '10:00-17:00', 'Tuesday': '10:00-17:00', 'Friday': '10:00-17:00'})
        hos = Hospital('Центральная больница #1', 'Волоколамское ш., 84, Москва, 125424', [], [nurse])
        doc = Doctor("Вова", "Медве", 35, 10, "Окулист")
        doc.new_patient(1, "Petrov F.E.")
        doc.new_patient(2, "Voronov V.R.")
        doc.new_patient(3, "Repotrov S.P.")
        doc2 = Doctor("Андрей", "Ашарев", 26, 15, "Хирург")
        doc3 = Doctor("Матвей", "Дерентев", 24, 16, "Терапевт")

        doc4 = Doctor("Vova", "Medven", 35, 10, "Proctologist")
        doc4.new_patient(1, "Petrov F.E.")
        doc4.new_patient(2, "Voronov V.R.")
        doc4.new_patient(3, "Repotrov S.P.")
        doc4.all_patient()
        doc4.del_patient(2)
        doc4.del_patient(2)
        doc4.all_patient()

        nurse_t = Nurse("Анна", "Анимова", 20, 234, "Центральный департамент",
                        {'Monday': '10:00-17:00', 'Tuesday': '10:00-17:00', 'Friday': '10:00-17:00'})
        # Выведем основуню информацию
        print(nurse_t, '\n')
        # Изменим департамент на 'Отделение 12'
        nurse_t.edit_department("Отделение 12")
        print(nurse_t)
        # Добавим новый день расписание
        nurse_t.add_schedule("Thursday", "12:00-13:00")
        nurse_t.edit_schedule("Thursday1", "12:00-13:00")
        nurse_t.edit_schedule("Thursday", "11:00-19:00")
        nurse_t.delete_schedule("Thursday")

        print(doc)
        hos + doc
        hos + doc2
        print(hos)
        print(len(hos))
        print(hos[0])
        print(hos[1])
        print(hos[3])
        print(hos)
        hos.make_txt()
        hos[1] = doc3
        del hos[2]
        print(hos)
        hos - doc3
        print(hos)
        hos + doc
        hos + doc2
        hos + doc3
        hos + doc4
        with open('data.pickle', 'wb') as f:
            pickle.dump(hos, f, fix_imports=True)
            pickle.dump(doc, f, fix_imports=True)

    except AssertionError:
        print("TEST ERROR")
        traceback.print_exc()
    else:
        print("TEST PASSED")
"""doc = Doctor("Vova", "Medven", 35, 10, "Proctologist")
doc.new_patient(1, "Petrov F.E.")
doc.new_patient(2, "Voronov V.R.")
doc.new_patient(3, "Repotrov S.P.")
doc.all_patient()
doc.del_patient(2)
doc.del_patient(2)
doc.all_patient()
print(doc)

nur = Nurse("Анна", "Анимова", 20, 234, "Центральный департамент",
            {'Monday': '10:00-17:00', 'Tuesday': '10:00-17:00', 'Friday': '10:00-17:00'})
nur.add_schedule("Thursday", "12:00-13:00")
nur.edit_schedule("Thursday1", "12:00-13:00")
nur.delete_schedule("Thursday")
print(nur)
"""
